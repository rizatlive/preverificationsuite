/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.vmware.preverificationsuite;

import java.awt.Color;
import java.awt.EventQueue;
import java.io.BufferedReader;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.ProtocolException;
import java.net.URL;
import java.util.Base64;
import java.util.concurrent.Executor;
import java.util.concurrent.TimeUnit;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.SwingUtilities;

/**
 *
 * @author mrizwan
 */
public class PreVerificationSuite extends javax.swing.JFrame {

    /**
     * Creates new form PreVerificationSuite
     */
    public PreVerificationSuite() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        preVerificationLabel = new javax.swing.JLabel();
        connectButton = new javax.swing.JButton();
        Manufacturer = new javax.swing.JLabel();
        manufacturerName = new javax.swing.JTextField();
        Model = new javax.swing.JLabel();
        SerialNumber = new javax.swing.JLabel();
        Agent = new javax.swing.JLabel();
        serialNumber = new javax.swing.JTextField();
        agentVersion = new javax.swing.JTextField();
        modelName = new javax.swing.JTextField();
        buildDisplay = new javax.swing.JTextField();
        BuildNumber = new javax.swing.JLabel();
        androidVersionDisplay = new javax.swing.JTextField();
        Brand = new javax.swing.JLabel();
        brandName = new javax.swing.JTextField();
        AndroidVersion = new javax.swing.JLabel();
        enrollResult = new javax.swing.JTextField();
        Enroll = new javax.swing.JLabel();
        cameraResult = new javax.swing.JTextField();
        cameraRestriction = new javax.swing.JLabel();
        startTest = new javax.swing.JButton();
        ServerConnection = new javax.swing.JLabel();
        DeviceConnection = new javax.swing.JLabel();
        connectProgressBar = new javax.swing.JProgressBar();
        serverCheck = new javax.swing.JTextField();
        deviceCheck = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        preVerificationLabel.setFont(new java.awt.Font("Calibri", 1, 36)); // NOI18N
        preVerificationLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        preVerificationLabel.setText("Pre Verification Suite");

        connectButton.setFont(new java.awt.Font("Calibri", 1, 24)); // NOI18N
        connectButton.setText("Connect Device");
        connectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectButtonActionPerformed(evt);
            }
        });

        Manufacturer.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        Manufacturer.setText("Manufacturer");

        manufacturerName.setEditable(false);
        manufacturerName.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        manufacturerName.setEnabled(false);

        Model.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        Model.setText("Model");

        SerialNumber.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        SerialNumber.setText("Serial Number");

        Agent.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        Agent.setText("Agent");

        serialNumber.setEditable(false);
        serialNumber.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        serialNumber.setEnabled(false);

        agentVersion.setEditable(false);
        agentVersion.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        agentVersion.setEnabled(false);

        modelName.setEditable(false);
        modelName.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        modelName.setEnabled(false);

        buildDisplay.setEditable(false);
        buildDisplay.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        buildDisplay.setEnabled(false);

        BuildNumber.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        BuildNumber.setText("Build Number");

        androidVersionDisplay.setEditable(false);
        androidVersionDisplay.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        androidVersionDisplay.setEnabled(false);

        Brand.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        Brand.setText("Brand");

        brandName.setEditable(false);
        brandName.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        brandName.setEnabled(false);

        AndroidVersion.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        AndroidVersion.setText("Android Version");

        enrollResult.setEditable(false);
        enrollResult.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        enrollResult.setEnabled(false);

        Enroll.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        Enroll.setText("Enrollment");

        cameraResult.setEditable(false);
        cameraResult.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        cameraResult.setEnabled(false);

        cameraRestriction.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        cameraRestriction.setText("Restrict Camera");

        startTest.setFont(new java.awt.Font("Calibri", 1, 24)); // NOI18N
        startTest.setText("Start Test");
        startTest.setEnabled(false);

        ServerConnection.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        ServerConnection.setText("Server Connection");

        DeviceConnection.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        DeviceConnection.setText("Device Connection");

        serverCheck.setEditable(false);
        serverCheck.setEnabled(false);

        deviceCheck.setEditable(false);
        deviceCheck.setEnabled(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(295, 295, 295)
                        .addComponent(preVerificationLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 392, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(64, 64, 64)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(SerialNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(serialNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(Manufacturer, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(Model, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(15, 15, 15)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(manufacturerName, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(modelName, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(BuildNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(buildDisplay, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(Brand, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(AndroidVersion, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(15, 15, 15)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(brandName, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(androidVersionDisplay, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(Enroll, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(enrollResult, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(cameraRestriction, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(cameraResult, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(Agent, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(agentVersion, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(29, 29, 29)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(startTest, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(DeviceConnection)
                                        .addGap(40, 40, 40)
                                        .addComponent(deviceCheck, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(ServerConnection, javax.swing.GroupLayout.PREFERRED_SIZE, 216, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(serverCheck, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(27, 27, 27))))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(342, 342, 342)
                        .addComponent(connectButton)
                        .addGap(85, 85, 85)
                        .addComponent(connectProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(28, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addComponent(preVerificationLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(connectButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(connectProgressBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(Manufacturer, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(manufacturerName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(Model, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(modelName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(SerialNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(serialNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(Brand, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(brandName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(AndroidVersion, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(androidVersionDisplay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(BuildNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(buildDisplay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Agent, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(agentVersion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ServerConnection, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(DeviceConnection, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(serverCheck, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(deviceCheck, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(13, 13, 13)
                .addComponent(startTest)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Enroll, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(enrollResult, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cameraRestriction, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cameraResult, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(427, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void connectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connectButtonActionPerformed
        Executor executor = java.util.concurrent.Executors.newSingleThreadExecutor();
        executor.execute(new Runnable(){
        @Override
        public void run(){
        connectProgressBar.setIndeterminate(true);
        boolean agent =false,device = false,server=false;
        setresult(manufacturerName,details("ro.product.manufacturer"),true);
        setresult(brandName,details("ro.product.brand"),true);
        setresult(modelName,details("ro.product.model"),true);
        setresult(androidVersionDisplay,details("ro.build.version.release"),true);
        setresult(serialNumber,details("ro.serialno"),true);
        setresult(buildDisplay,details("ro.build.display.id"),true);
        setresult(agentVersion,true);
        setresult(deviceCheck,true);
        setresult(serverCheck,true);
        if (details("ro.product.manufacturer")!= "No device"){         
           if(checkPackage("com.airwatch.androidagent")){
               agent = true;
               setresult(agentVersion,checkVersion("com.airwatch.androidagent"),true);
           }           
           else agentVersion.setText("Not Installed");
           if(pingConnectivity("www.google.com")){
               deviceCheck.setBackground(Color.green);
               device = true;    
           }else{
               deviceCheck.setBackground(Color.red);
           }
        }else {agentVersion.setText("No device");
        deviceCheck.setBackground(Color.red);
        }
             
        try {
             serverCheck.setBackground(Color.red);
             if(URLConnection("https://rugg06.ssdevrd.com/","","")){
             server = true;
             serverCheck.setBackground(Color.green);
            }
          } catch (IOException ex) {
            Logger.getLogger(PreVerificationSuite.class.getName()).log(Level.SEVERE, null, ex);
           }
               
           if(agent && device && server){
            startTest.setEnabled(true);
            }
        connectProgressBar.setIndeterminate(false);  
        connectProgressBar.setValue(100);
         }
 });
    
    }//GEN-LAST:event_connectButtonActionPerformed

    /* This Method is used for checking device details */
    private String details(String command){
            ProcessBuilder pb = new ProcessBuilder("adb", "shell", "getprop", command);
            result = result.runcommand(pb);
            if((result.error.toString()).contains("error")){
                return "No device";
            } else{
                return result.output.toString().replaceAll("\\s+","");
            }
    }
    
    /* This Method is used for checking existing App */
    private boolean checkPackage(String packageName){
            ProcessBuilder pb = new ProcessBuilder("adb", "shell", "pm","list", "packages",packageName);
            result = result.runcommand(pb);
            return ((result.output.toString()).contains(packageName))? true: false;
    }
    
    private void setresult(javax.swing.JTextField textfield, String text, boolean status){
        textfield.setEnabled(status);
        textfield.setText(text);
    }
    
    private void setresult(javax.swing.JTextField textfield,boolean status){
        textfield.setEnabled(status);
    }
    
    private String checkVersion(String packageName){
            ProcessBuilder pb = new ProcessBuilder("adb", "shell", "dumpsys","package",packageName ,"|","grep","-m1","versionName");
            result = result.runcommand(pb);
            return result.output.toString().replaceAll("\\s+","").replaceAll("versionName=","");
        
    }
    private boolean pingConnectivity(String url){
            ProcessBuilder pb= new ProcessBuilder("adb", "shell","ping", "-c2",url);
            result = result.runcommand(pb);
            return ((result.output.toString()).contains("unknown host"))? false: true;
    }
    
    private boolean URLConnection(String URL, String API, String status) throws IOException{
        String authString = "adminfolder:adminfolder";       
        byte[] authEncBytes = Base64.getEncoder().encode(authString.getBytes());
	String authStringEnc = new String(authEncBytes);
		      
        URL requestURL = new URL(URL+API+status);
        StringBuilder requestBodyBuilder = new StringBuilder();
        String requestBody = requestBodyBuilder.toString();
        HttpURLConnection connection = (HttpURLConnection) requestURL.openConnection();

            try {
                connection.setRequestMethod("POST");
            } catch (ProtocolException ex) {
                Logger.getLogger(PreVerificationSuite.class.getName()).log(Level.SEVERE, null, ex);
            }
            connection.setRequestProperty("Content-Length", "" + Integer.toString(requestBody.getBytes().length));
            connection.setRequestProperty("Authorization", "Basic " +authStringEnc);
            connection.setRequestProperty("Content-Type", "application/json");
            connection.setRequestProperty("aw-tenant-code", "Mdn3XFFG7+5SpgomE22r0sO0RjfbN4HZsQn1T3M6R6Q=");
            connection.setDoOutput(true);
            connection.setDoInput(true);

            try (DataOutputStream sendData = new DataOutputStream(connection.getOutputStream())) {
               sendData.writeBytes(requestBody);
                sendData.flush();
              } catch (IOException ex) {
                Logger.getLogger(PreVerificationSuite.class.getName()).log(Level.SEVERE, null, ex);
            }
            int responseCode = connection.getResponseCode();            
            return (responseCode == 200)? true :false;
}
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PreVerificationSuite.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PreVerificationSuite.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PreVerificationSuite.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PreVerificationSuite.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PreVerificationSuite().setVisible(true);
            }
        });
    }
    
    adbCommand result= new adbCommand();

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Agent;
    private javax.swing.JLabel AndroidVersion;
    private javax.swing.JLabel Brand;
    private javax.swing.JLabel BuildNumber;
    private javax.swing.JLabel DeviceConnection;
    private javax.swing.JLabel Enroll;
    private javax.swing.JLabel Manufacturer;
    private javax.swing.JLabel Model;
    private javax.swing.JLabel SerialNumber;
    private javax.swing.JLabel ServerConnection;
    private javax.swing.JTextField agentVersion;
    private javax.swing.JTextField androidVersionDisplay;
    private javax.swing.JTextField brandName;
    private javax.swing.JTextField buildDisplay;
    private javax.swing.JLabel cameraRestriction;
    private javax.swing.JTextField cameraResult;
    private javax.swing.JButton connectButton;
    private javax.swing.JProgressBar connectProgressBar;
    private javax.swing.JTextField deviceCheck;
    private javax.swing.JTextField enrollResult;
    private javax.swing.JTextField manufacturerName;
    private javax.swing.JTextField modelName;
    private javax.swing.JLabel preVerificationLabel;
    private javax.swing.JTextField serialNumber;
    private javax.swing.JTextField serverCheck;
    private javax.swing.JButton startTest;
    // End of variables declaration//GEN-END:variables
}
