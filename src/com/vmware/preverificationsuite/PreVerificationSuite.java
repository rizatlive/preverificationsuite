/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.vmware.preverificationsuite;

import java.awt.Color;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.net.ProtocolException;
import java.net.URL;
import java.util.Base64;
import java.util.concurrent.Executor;
import java.util.concurrent.TimeUnit;
import java.util.logging.Level;
import java.util.logging.Logger;


/**
 *
 * @author mrizwan
 */
public class PreVerificationSuite extends javax.swing.JFrame {

    /**
     * Creates new form PreVerificationSuite
     */
    public PreVerificationSuite() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        preVerificationLabel = new javax.swing.JLabel();
        connectButton = new javax.swing.JButton();
        Manufacturer = new javax.swing.JLabel();
        manufacturerName = new javax.swing.JTextField();
        Model = new javax.swing.JLabel();
        SerialNumber = new javax.swing.JLabel();
        Agent = new javax.swing.JLabel();
        serialNumber = new javax.swing.JTextField();
        agentVersion = new javax.swing.JTextField();
        modelName = new javax.swing.JTextField();
        buildDisplay = new javax.swing.JTextField();
        BuildNumber = new javax.swing.JLabel();
        androidVersionDisplay = new javax.swing.JTextField();
        Brand = new javax.swing.JLabel();
        brandName = new javax.swing.JTextField();
        AndroidVersion = new javax.swing.JLabel();
        enrollResult = new javax.swing.JTextField();
        EnrollmentLabel = new javax.swing.JLabel();
        startTest = new javax.swing.JButton();
        ServerConnection = new javax.swing.JLabel();
        DeviceConnection = new javax.swing.JLabel();
        connectProgressBar = new javax.swing.JProgressBar();
        serverCheck = new javax.swing.JTextField();
        deviceCheck = new javax.swing.JTextField();
        startProgressBar = new javax.swing.JProgressBar();
        awcmResult = new javax.swing.JTextField();
        AWCMLabel = new javax.swing.JLabel();
        pushResult = new javax.swing.JTextField();
        pushLabel = new javax.swing.JLabel();
        passcodeResult = new javax.swing.JTextField();
        passcodeLabel = new javax.swing.JLabel();
        vpnResult = new javax.swing.JTextField();
        vpnLabel = new javax.swing.JLabel();
        folderResult = new javax.swing.JTextField();
        createFolderLabel = new javax.swing.JLabel();
        wifiResult = new javax.swing.JTextField();
        wifiLabel = new javax.swing.JLabel();
        cameraResult = new javax.swing.JTextField();
        restrictCameraLabel = new javax.swing.JLabel();
        wipeResult = new javax.swing.JTextField();
        wipeLabel = new javax.swing.JLabel();
        compromisedResult = new javax.swing.JTextField();
        deviceCompromisedLabel = new javax.swing.JLabel();
        reset = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        preVerificationLabel.setFont(new java.awt.Font("Calibri", 1, 36)); // NOI18N
        preVerificationLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        preVerificationLabel.setText("Pre Verification Suite");

        connectButton.setFont(new java.awt.Font("Calibri", 1, 24)); // NOI18N
        connectButton.setText("Connect Device");
        connectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectButtonActionPerformed(evt);
            }
        });

        Manufacturer.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        Manufacturer.setText("Manufacturer");

        manufacturerName.setEditable(false);
        manufacturerName.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        manufacturerName.setEnabled(false);

        Model.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        Model.setText("Model");

        SerialNumber.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        SerialNumber.setText("Serial Number");

        Agent.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        Agent.setText("Agent");

        serialNumber.setEditable(false);
        serialNumber.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        serialNumber.setEnabled(false);

        agentVersion.setEditable(false);
        agentVersion.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        agentVersion.setEnabled(false);

        modelName.setEditable(false);
        modelName.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        modelName.setEnabled(false);

        buildDisplay.setEditable(false);
        buildDisplay.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        buildDisplay.setEnabled(false);

        BuildNumber.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        BuildNumber.setText("Build Number");

        androidVersionDisplay.setEditable(false);
        androidVersionDisplay.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        androidVersionDisplay.setEnabled(false);

        Brand.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        Brand.setText("Brand");

        brandName.setEditable(false);
        brandName.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        brandName.setEnabled(false);

        AndroidVersion.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        AndroidVersion.setText("Android Version");

        enrollResult.setEditable(false);
        enrollResult.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        enrollResult.setEnabled(false);

        EnrollmentLabel.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        EnrollmentLabel.setText("Enrollment");

        startTest.setFont(new java.awt.Font("Calibri", 1, 24)); // NOI18N
        startTest.setText("Start Test");
        startTest.setEnabled(false);
        startTest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startTestActionPerformed(evt);
            }
        });

        ServerConnection.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        ServerConnection.setText("Server Connection");

        DeviceConnection.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        DeviceConnection.setText("Device Connection");

        connectProgressBar.setFont(new java.awt.Font("Calibri", 1, 24)); // NOI18N
        connectProgressBar.setEnabled(false);

        serverCheck.setEditable(false);
        serverCheck.setEnabled(false);

        deviceCheck.setEditable(false);
        deviceCheck.setEnabled(false);

        startProgressBar.setFont(new java.awt.Font("Calibri", 1, 24)); // NOI18N
        startProgressBar.setEnabled(false);

        awcmResult.setEditable(false);
        awcmResult.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        awcmResult.setEnabled(false);

        AWCMLabel.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        AWCMLabel.setText("AWCM Status");

        pushResult.setEditable(false);
        pushResult.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        pushResult.setEnabled(false);

        pushLabel.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        pushLabel.setText("Push Notification");

        passcodeResult.setEditable(false);
        passcodeResult.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        passcodeResult.setEnabled(false);

        passcodeLabel.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        passcodeLabel.setText("Passcode");

        vpnResult.setEditable(false);
        vpnResult.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        vpnResult.setEnabled(false);

        vpnLabel.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        vpnLabel.setText("VPN");

        folderResult.setEditable(false);
        folderResult.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        folderResult.setEnabled(false);

        createFolderLabel.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        createFolderLabel.setText("Create Folder");

        wifiResult.setEditable(false);
        wifiResult.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        wifiResult.setEnabled(false);

        wifiLabel.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        wifiLabel.setText("Wi-Fi");

        cameraResult.setEditable(false);
        cameraResult.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        cameraResult.setEnabled(false);

        restrictCameraLabel.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        restrictCameraLabel.setText("Restrict Camera");

        wipeResult.setEditable(false);
        wipeResult.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        wipeResult.setEnabled(false);

        wipeLabel.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        wipeLabel.setText("Enterprise Wipe");

        compromisedResult.setEditable(false);
        compromisedResult.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        compromisedResult.setEnabled(false);

        deviceCompromisedLabel.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        deviceCompromisedLabel.setText("Device Compromised");

        reset.setFont(new java.awt.Font("Calibri", 1, 24)); // NOI18N
        reset.setText("Reset");
        reset.setEnabled(false);
        reset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(295, 295, 295)
                        .addComponent(preVerificationLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 392, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(342, 342, 342)
                        .addComponent(connectButton)
                        .addGap(83, 83, 83)
                        .addComponent(connectProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(64, 64, 64)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(SerialNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                            .addComponent(serialNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(layout.createSequentialGroup()
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(Manufacturer, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(Model, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGap(15, 15, 15)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(manufacturerName, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(modelName, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                    .addGap(18, 18, 18)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(BuildNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                            .addComponent(buildDisplay, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(layout.createSequentialGroup()
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(Brand, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(AndroidVersion, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGap(15, 15, 15)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(brandName, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(androidVersionDisplay, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(Agent, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(agentVersion, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGap(29, 29, 29)
                                            .addComponent(DeviceConnection)
                                            .addGap(40, 40, 40)
                                            .addComponent(deviceCheck, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(ServerConnection, javax.swing.GroupLayout.PREFERRED_SIZE, 216, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(serverCheck, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGap(27, 27, 27))
                                        .addGroup(layout.createSequentialGroup()
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                .addGroup(layout.createSequentialGroup()
                                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                        .addGroup(layout.createSequentialGroup()
                                                            .addComponent(restrictCameraLabel)
                                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                            .addComponent(cameraResult, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                                            .addComponent(EnrollmentLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                            .addComponent(enrollResult, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                            .addGroup(layout.createSequentialGroup()
                                                                .addComponent(AWCMLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 228, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                                .addComponent(awcmResult, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                                                .addComponent(pushLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 228, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                                .addComponent(pushResult, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                                    .addGap(34, 34, 34)
                                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                            .addGroup(layout.createSequentialGroup()
                                                                .addComponent(createFolderLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                                .addComponent(folderResult, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                                                .addComponent(passcodeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                                .addComponent(passcodeResult, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                                                .addComponent(vpnLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                                .addComponent(vpnResult, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                                        .addGroup(layout.createSequentialGroup()
                                                            .addComponent(wifiLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                            .addComponent(wifiResult, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                                .addGroup(layout.createSequentialGroup()
                                                    .addComponent(deviceCompromisedLabel)
                                                    .addGap(21, 21, 21)
                                                    .addComponent(compromisedResult, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addGap(34, 34, 34)
                                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(reset, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addGroup(layout.createSequentialGroup()
                                                            .addComponent(wipeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                            .addComponent(wipeResult, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                                            .addGap(0, 0, Short.MAX_VALUE)))))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(285, 285, 285)
                                .addComponent(startTest, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(73, 73, 73)
                                .addComponent(startProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(64, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addComponent(preVerificationLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(connectButton)
                    .addComponent(connectProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(Manufacturer, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(manufacturerName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(Model, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(modelName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(SerialNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(serialNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(Brand, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(brandName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(AndroidVersion, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(androidVersionDisplay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(BuildNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(buildDisplay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Agent, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(agentVersion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ServerConnection, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(DeviceConnection, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(serverCheck, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(deviceCheck, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(48, 48, 48)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(startProgressBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(startTest))
                .addGap(45, 45, 45)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(createFolderLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(folderResult, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(passcodeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(passcodeResult, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 17, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(vpnLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(vpnResult, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 4, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(EnrollmentLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(enrollResult, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(AWCMLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(awcmResult, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(pushLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(pushResult, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(restrictCameraLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cameraResult, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(wifiLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(wifiResult, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(deviceCompromisedLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(compromisedResult, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(wipeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(wipeResult, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(58, 58, 58)
                .addComponent(reset)
                .addGap(67, 67, 67))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void connectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connectButtonActionPerformed
        Executor executor = java.util.concurrent.Executors.newSingleThreadExecutor();
        executor.execute(new Runnable(){
        @Override
        public void run(){
        connectProgressBar.setEnabled(true);
        connectProgressBar.setIndeterminate(true);
        connectProgressBar.setStringPainted(true);
        connectProgressBar.setString("In Progress"); 
        boolean agent =false,device = false,server=false;
        setresult(manufacturerName,details("ro.product.manufacturer"),true);
        setresult(brandName,details("ro.product.brand"),true);
        setresult(modelName,details("ro.product.model"),true);
        setresult(androidVersionDisplay,details("ro.build.version.release"),true);
        serialno = details("ro.serialno");
        setresult(serialNumber,serialno,true);
        setresult(buildDisplay,details("ro.build.display.id"),true);
        setresult(agentVersion,true);
        setresult(deviceCheck,true);
        setresult(serverCheck,true);
        if (details("ro.product.manufacturer")!= "No device"){         
           if(checkPackage("com.airwatch.androidagent")){
               agent = true;
               setresult(agentVersion,checkVersion("com.airwatch.androidagent"),true);
           }           
           else agentVersion.setText("Not Installed");
           if(pingConnectivity("www.google.com")){
               deviceCheck.setBackground(Color.green);
               device = true;    
           }else{
               deviceCheck.setBackground(Color.red);
           }
        }else {agentVersion.setText("No device");
        deviceCheck.setBackground(Color.red);
        }
             
        try {
             
             if(URLConnection(URL,"","","")){
             server = true;
             serverCheck.setBackground(Color.green);
            }
          } catch (IOException ex) {
            Logger.getLogger(PreVerificationSuite.class.getName()).log(Level.SEVERE, null, ex);
            serverCheck.setBackground(Color.red);
           }
               
           if(agent && device && server){
            startTest.setEnabled(true);
            }
            connectProgressBar.setValue(100);
            connectProgressBar.setString("Completed");
            connectProgressBar.setIndeterminate(false);
            reset.setEnabled(true);
       }
 }); 
    
    }//GEN-LAST:event_connectButtonActionPerformed

    private void startTestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startTestActionPerformed
        Executor executor = java.util.concurrent.Executors.newSingleThreadExecutor();
        executor.execute(new Runnable(){
        @Override
        public void run(){
        startTest.setEnabled(false);
        reset.setEnabled(false);
        startProgressBar.setEnabled(true);
        startProgressBar.setIndeterminate(true);
        startProgressBar.setStringPainted(true);
        startProgressBar.setString("In Progress"); 
        setresult(folderResult,createFolder(),true);
//        String enrollmentStatus = enroll();        
//        setresult(enrollResult,enrollmentStatus,true);
//        if(enrollmentStatus.equalsIgnoreCase("Pass")){
//            try {
//                setresult(awcmResult,awcmStatus(),true);
//                setresult(pushResult,pushNotification(),true);
//                setresult(cameraResult,cameraRestriction(),true);
//                setresult(compromisedResult,deviceCompromised(),true);
//                setresult(folderResult,createFolder(),true);
//                setresult(passcodeResult,passcode(),true);
//                setresult(vpnResult,vpnProfile(),true);
//                setresult(wifiResult,wifiProfile(),true);   
//                setresult(wipeResult,enterpriseWipe(),true);
//            } catch (IOException ex) {
//                Logger.getLogger(PreVerificationSuite.class.getName()).log(Level.SEVERE, null, ex);
//            }
//        }
        reset.setEnabled(true);
        startProgressBar.setValue(100);
        startProgressBar.setString("Completed");
        startProgressBar.setIndeterminate(false);
        startTest.setEnabled(false);
        }
    });  
    }//GEN-LAST:event_startTestActionPerformed

    private void resetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetActionPerformed
        setresult(manufacturerName,"",false);
        setresult(brandName,"",false);
        setresult(modelName,"",false);
        setresult(androidVersionDisplay,"",false);
        setresult(serialNumber,"",false);
        setresult(buildDisplay,"",false);
        setresult(agentVersion,"",false);
        serverCheck.setBackground(Color.white);
        deviceCheck.setBackground(Color.white);
        setresult(deviceCheck,false);
        setresult(serverCheck,false);
        setresult(enrollResult,"",false);
        setresult(awcmResult,"",false);
        setresult(pushResult,"",false);
        setresult(cameraResult,"",false);
        setresult(compromisedResult,"",false);
        setresult(folderResult,"",false);
        setresult(passcodeResult,"",false);
        setresult(vpnResult,"",false);
        setresult(wifiResult,"",false);   
        setresult(wipeResult,"",false);
        connectProgressBar.setValue(0);
        connectProgressBar.setString("");
        connectProgressBar.setEnabled(false);
        startProgressBar.setValue(0);
        startProgressBar.setString("");
        startProgressBar.setEnabled(false);
        startTest.setEnabled(false);       
    }//GEN-LAST:event_resetActionPerformed

    /* This Method is used for checking device details */
    private String details(String command){
        ProcessBuilder pb = new ProcessBuilder("adb", "shell", "getprop", command);
        result = result.runcommand(pb);
        if((result.error.toString()).contains("error")){
            return "No device";
        } else{
            return result.output.toString().replaceAll("\\s+","");
        }
    }
    
    /* This Method is used for checking existing App */
    private boolean checkPackage(String packageName){
        ProcessBuilder pb = new ProcessBuilder("adb", "shell", "pm","list", "packages",packageName);
        result = result.runcommand(pb);
        return (result.output.toString()).contains(packageName);
    }
    
    private void setresult(javax.swing.JTextField textfield, String text, boolean status){
        textfield.setEnabled(status);
        textfield.setText(text);
        if(text.equalsIgnoreCase("Pass")){
            textfield.setBackground(Color.green);
        }else if(text.equalsIgnoreCase("Fail")){
            textfield.setBackground(Color.red);
        }else{
            textfield.setBackground(Color.white);
        }
    }
    
    private void setresult(javax.swing.JTextField textfield,boolean status){
        textfield.setEnabled(status);
    }
    
    private String checkVersion(String packageName){
        ProcessBuilder pb = new ProcessBuilder("adb", "shell", "dumpsys","package",packageName ,"|","grep","-m1","versionName");
        result = result.runcommand(pb);
        return result.output.toString().replaceAll("\\s+","").replaceAll("versionName=","");
        
    }
    private boolean pingConnectivity(String url){
        ProcessBuilder pb= new ProcessBuilder("adb", "shell","ping", "-c2",url);
        result = result.runcommand(pb);
        return !((result.output.toString()).contains("unknown host")||(result.error.toString()).contains("unknown host"));
    }
    
    private String enroll(){
        installApp(Path+"\\ApkFiles\\01enrollment.apk");
        installApp(Path+"\\ApkFiles\\01enrollmentTest.apk");
        status = result.runCommand("com.vmware.uiauto.ExampleInstrumentedTest", "com.vmware.uiauto.test/android.support.test.runner.AndroidJUnitRunner");      
        uninstallApp("com.vmware.uiauto");
        uninstallApp("com.vmware.uiauto.test");
        return status;
    }
    
    private String awcmStatus(){
        int count =0;
         installApp(Path+"\\ApkFiles\\02awcm.apk");
         installApp(Path+"\\ApkFiles\\02awcmTest.apk");
         do{
         status = result.runCommand("com.vmware.awcm.ExampleInstrumentedTest", "com.vmware.awcm.test/android.support.test.runner.AndroidJUnitRunner");
          }while(status.equals("Fail")&& count++<5);
         uninstallApp("com.vmware.awcm");
         uninstallApp("com.vmware.awcm.test");
         return status;
    }
    
    private String pushNotification() throws IOException{
        int count =0;
         String input = "{\"MessageBody\": \"GoodDay\",\"Application\": \"AirWatch\" ,\"MessageType\": \"Apns\"}";
         URLConnection(URL,"/api/mdm/devices/messages/push?searchby=Serialnumber&id=",serialno,input);
         installApp(Path+"\\ApkFiles\\03pushNotification.apk");
         installApp(Path+"\\ApkFiles\\03pushNotificationTest.apk");
         do{
         status = result.runCommand("com.vmware.push_notification.ExampleInstrumentedTest", "com.vmware.push_notification.test/android.support.test.runner.AndroidJUnitRunner");
          }while(status.equals("Fail")&& count++<5);
         installApp(Path+"\\ApkFiles\\05superuser.apk");
         uninstallApp("com.vmware.push_notification");
         uninstallApp("com.vmware.push_notification.test");
         return status;
    }
    
    private String cameraRestriction(){
        int count =0;
        installApp(Path+"\\ApkFiles\\04camera.apk");
        installApp(Path+"\\ApkFiles\\04cameraTest.apk");
        installApp(Path+"\\ApkFiles\\04cameraapp.apk");
        do{
        status=  result.runCommand("com.vmware.cameraautomation.ExampleInstrumentedTest", "com.vmware.cameraautomation.test/android.support.test.runner.AndroidJUnitRunner");      
         }while(status.equals("Fail")&& count++<5);
        uninstallApp("com.flavionet.android.camera.lite");
        uninstallApp("com.vmware.cameraautomation");
        uninstallApp("com.vmware.cameraautomation.test");
        return status;           
    }
    private String deviceCompromised(){
        int count =0;
        installApp(Path+"\\ApkFiles\\05deviceCompromised.apk");
        installApp(Path+"\\ApkFiles\\05deviceCompromisedTest.apk");
        do{
        status = result.runCommand("com.vmware.devicecompromised.ExampleInstrumentedTest", "com.vmware.devicecompromised.test/android.support.test.runner.AndroidJUnitRunner");
         }while(status.equals("Fail")&& count++<5);
        uninstallApp("com.vmware.devicecompromised");
        uninstallApp("com.vmware.devicecompromised.test");
        uninstallApp("eu.chainfire.supersu");
        return status;
    }
    
    private String createFolder(){
        int count =0;
        boolean folderResult =true;
        do{
            try {
                folderResult = checkFolder("//sdcard//folder1");
                TimeUnit.SECONDS.sleep(2);
            } catch (InterruptedException ex) {
                Logger.getLogger(PreVerificationSuite.class.getName()).log(Level.SEVERE, null, ex);
            }
         }while(folderResult && count++<5);
        status = folderResult ?"Fail":"Pass";
        return status;
    }
    
    private String passcode() throws IOException{
        int count =0;
        URLConnection(URL,"api/mdm/profiles/1869/","activate","");
        installApp(Path+"\\ApkFiles\\07passcode.apk");
        installApp(Path+"\\ApkFiles\\07passcodeTest.apk");
//        installApp(Path+"\\ApkFiles\\07passcode2.apk");
//        installApp(Path+"\\ApkFiles\\07passcodeTest2.apk");
        do{
        status =result.runCommand("com.vmware.passcode.ExampleInstrumentedTest", "com.vmware.passcode.test/android.support.test.runner.AndroidJUnitRunner");
//        status = result.runCommand("com.vmware.passcode_verification.ExampleInstrumentedTest", "com.vmware.passcode_verification.test/android.support.test.runner.AndroidJUnitRunner");
        }while(status.equals("Fail")&& count++<1);
        uninstallApp("com.vmware.passcode");
//        uninstallApp("com.vmware.passcode_verification");
        uninstallApp("com.vmware.passcode.test");
//        uninstallApp("com.vmware.passcode_verification.test");
        URLConnection(URL,"api/mdm/profiles/1869/","deactivate","");
        return status;
    }
    
    private String vpnProfile() throws IOException{
        int count =0;
        URLConnection(URL,"api/mdm/profiles/1868/","activate","");
        installApp(Path+"\\ApkFiles\\08vpn.apk");
        installApp(Path+"\\ApkFiles\\08vpnTest.apk");
        installApp(Path+"\\ApkFiles\\08CiscoVPN.apk");
        do{
        status = result.runCommand("com.vmware.vpn.ExampleInstrumentedTest", "com.vmware.vpn.test/android.support.test.runner.AndroidJUnitRunner");
        }while(status.equals("Fail")&& count++<5);
        uninstallApp("com.vmware.vpn");
        uninstallApp("com.vmware.vpn.test");
        uninstallApp("com.cisco.anyconnect.vpn.android.avf");
        URLConnection(URL,"api/mdm/profiles/1868/","deactivate","");
        return status;
    }
    
    private String wifiProfile(){
        int count =0;
        boolean wifiresult;
        do{
            wifiresult = checkWiFi("DVTWiFi");
        }while(!wifiresult && count++<5);
        status = wifiresult ?"Pass":"Fail";
        return status;
    }
    
    private String enterpriseWipe() throws IOException{
        int count =0;
        URLConnection(URL,"api/mdm/devices/commands?command=EnterpriseWipe&searchby=Serialnumber&id=",serialno,"");
        installApp(Path+"\\ApkFiles\\10wipe.apk");
        installApp(Path+"\\ApkFiles\\10wipeTest.apk");
        do{
        status = result.runCommand("com.vmware.enterprise_wipe.ExampleInstrumentedTest", "com.vmware.enterprise_wipe.test/android.support.test.runner.AndroidJUnitRunner");
        }while(status.equals("Fail")&& count++<5);
        uninstallApp("com.vmware.enterprise_wipe");
        uninstallApp("com.vmware.enterprise_wipe.test");
        return status;
    }
    
    private boolean checkWiFi(String SSID){
        ProcessBuilder pb = new ProcessBuilder("adb", "shell", "dumpsys","wifi","|","grep","-m1",SSID);
        result = result.runcommand(pb);
        return ((result.output.toString()).contains(SSID));
    }
    
    private boolean checkFolder(String path){
        ProcessBuilder pb = new ProcessBuilder("adb", "shell", "ls",path);
        result = result.runcommand(pb);
        return ((result.error.toString()).contains("No such file or directory"));
    }
    
    private boolean URLConnection(String URL, String API, String status, String body) throws IOException{
        String authString = "adminfolder:adminfolder";       
        byte[] authEncBytes = Base64.getEncoder().encode(authString.getBytes());
	String authStringEnc = new String(authEncBytes);
		      
        URL requestURL = new URL(URL+API+status);
        StringBuilder requestBodyBuilder = new StringBuilder();
        String requestBody = requestBodyBuilder.toString();
        HttpURLConnection connection = (HttpURLConnection) requestURL.openConnection();

            try {
                connection.setRequestMethod("POST");
            } catch (ProtocolException ex) {
                Logger.getLogger(PreVerificationSuite.class.getName()).log(Level.SEVERE, null, ex);
            }
            connection.setRequestProperty("Content-Length", "" + Integer.toString(requestBody.getBytes().length));
            connection.setRequestProperty("Authorization", "Basic " +authStringEnc);
            connection.setRequestProperty("Content-Type", "application/json");
            connection.setRequestProperty("aw-tenant-code", "Mdn3XFFG7+5SpgomE22r0sO0RjfbN4HZsQn1T3M6R6Q=");
            connection.setDoOutput(true);
            connection.setDoInput(true);
            OutputStream os = connection.getOutputStream();
            os.write(body.getBytes());
            os.flush();

            try (DataOutputStream sendData = new DataOutputStream(connection.getOutputStream())) {
               sendData.writeBytes(requestBody);
                sendData.flush();
              } catch (IOException ex) {
                Logger.getLogger(PreVerificationSuite.class.getName()).log(Level.SEVERE, null, ex);
            }
            int responseCode = connection.getResponseCode();            
            return ((responseCode == 200)? true :false);
        }
    
    private void installApp(String appName){
        ProcessBuilder pb = new ProcessBuilder("adb", "install","-t", "-r",appName);
        Process pc;
        try {
            pc = pb.start();
            pc.waitFor();
        } catch (IOException | InterruptedException ex) {
            Logger.getLogger(PreVerificationSuite.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private void uninstallApp(String appName){
        ProcessBuilder pb = new ProcessBuilder("adb", "uninstall",appName);
        Process pc;
        try {
            pc = pb.start();
            pc.waitFor();
        } catch (IOException | InterruptedException ex) {
            Logger.getLogger(PreVerificationSuite.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PreVerificationSuite.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PreVerificationSuite.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PreVerificationSuite.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PreVerificationSuite.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PreVerificationSuite().setVisible(true);
            }
        });
    }
    
    String URL ="https://auto06.airwatchqa.com/";
    String status, serialno;
    adbCommand result= new adbCommand();
    String Path = System.getProperty("user.dir");
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel AWCMLabel;
    private javax.swing.JLabel Agent;
    private javax.swing.JLabel AndroidVersion;
    private javax.swing.JLabel Brand;
    private javax.swing.JLabel BuildNumber;
    private javax.swing.JLabel DeviceConnection;
    private javax.swing.JLabel EnrollmentLabel;
    private javax.swing.JLabel Manufacturer;
    private javax.swing.JLabel Model;
    private javax.swing.JLabel SerialNumber;
    private javax.swing.JLabel ServerConnection;
    private javax.swing.JTextField agentVersion;
    private javax.swing.JTextField androidVersionDisplay;
    private javax.swing.JTextField awcmResult;
    private javax.swing.JTextField brandName;
    private javax.swing.JTextField buildDisplay;
    private javax.swing.JTextField cameraResult;
    private javax.swing.JTextField compromisedResult;
    private javax.swing.JButton connectButton;
    private javax.swing.JProgressBar connectProgressBar;
    private javax.swing.JLabel createFolderLabel;
    private javax.swing.JTextField deviceCheck;
    private javax.swing.JLabel deviceCompromisedLabel;
    private javax.swing.JTextField enrollResult;
    private javax.swing.JTextField folderResult;
    private javax.swing.JTextField manufacturerName;
    private javax.swing.JTextField modelName;
    private javax.swing.JLabel passcodeLabel;
    private javax.swing.JTextField passcodeResult;
    private javax.swing.JLabel preVerificationLabel;
    private javax.swing.JLabel pushLabel;
    private javax.swing.JTextField pushResult;
    private javax.swing.JButton reset;
    private javax.swing.JLabel restrictCameraLabel;
    private javax.swing.JTextField serialNumber;
    private javax.swing.JTextField serverCheck;
    private javax.swing.JProgressBar startProgressBar;
    private javax.swing.JButton startTest;
    private javax.swing.JLabel vpnLabel;
    private javax.swing.JTextField vpnResult;
    private javax.swing.JLabel wifiLabel;
    private javax.swing.JTextField wifiResult;
    private javax.swing.JLabel wipeLabel;
    private javax.swing.JTextField wipeResult;
    // End of variables declaration//GEN-END:variables
}
