/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.vmware.preverificationsuite;

import java.awt.Color;
import java.awt.Desktop;
import java.awt.image.BufferedImage;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.io.StringReader;
import java.net.HttpURLConnection;
import java.net.ProtocolException;
import java.net.URL;
import java.text.SimpleDateFormat;
import java.util.Base64;
import java.util.Date;
import java.util.Properties;
import java.util.concurrent.Executor;
import java.util.concurrent.TimeUnit;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.crypto.Cipher;
import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;
import javax.imageio.ImageIO;
import javax.swing.UIManager;


/**
 *
 * @author mrizwan
 */
public class PreVerificationSuite extends javax.swing.JFrame {

    /**
     * Creates new form PreVerificationSuite
     */
    public PreVerificationSuite() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        preVerificationLabel = new javax.swing.JLabel();
        connectButton = new javax.swing.JButton();
        Manufacturer = new javax.swing.JLabel();
        manufacturerName = new javax.swing.JTextField();
        Model = new javax.swing.JLabel();
        SerialNumber = new javax.swing.JLabel();
        Agent = new javax.swing.JLabel();
        serialNumber = new javax.swing.JTextField();
        agentVersion = new javax.swing.JTextField();
        modelName = new javax.swing.JTextField();
        buildDisplay = new javax.swing.JTextField();
        BuildNumber = new javax.swing.JLabel();
        androidVersionDisplay = new javax.swing.JTextField();
        Brand = new javax.swing.JLabel();
        brandName = new javax.swing.JTextField();
        AndroidVersion = new javax.swing.JLabel();
        enrollResult = new javax.swing.JTextField();
        EnrollmentLabel = new javax.swing.JLabel();
        ServerConnection = new javax.swing.JLabel();
        DeviceConnection = new javax.swing.JLabel();
        serverCheck = new javax.swing.JTextField();
        deviceCheck = new javax.swing.JTextField();
        startProgressBar = new javax.swing.JProgressBar();
        awcmResult = new javax.swing.JTextField();
        AWCMLabel = new javax.swing.JLabel();
        pushResult = new javax.swing.JTextField();
        pushLabel = new javax.swing.JLabel();
        complianceResult = new javax.swing.JTextField();
        complianceLabel = new javax.swing.JLabel();
        vpnResult = new javax.swing.JTextField();
        vpnLabel = new javax.swing.JLabel();
        folderResult = new javax.swing.JTextField();
        createFolderLabel = new javax.swing.JLabel();
        wifiResult = new javax.swing.JTextField();
        wifiLabel = new javax.swing.JLabel();
        cameraResult = new javax.swing.JTextField();
        restrictCameraLabel = new javax.swing.JLabel();
        wipeResult = new javax.swing.JTextField();
        wipeLabel = new javax.swing.JLabel();
        compromisedResult = new javax.swing.JTextField();
        deviceCompromisedLabel = new javax.swing.JLabel();
        reset = new javax.swing.JButton();
        sendReport = new javax.swing.JButton();
        failedLogs = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Pre Verification Suite");
        setResizable(false);

        preVerificationLabel.setFont(new java.awt.Font("Calibri", 1, 36)); // NOI18N
        preVerificationLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        preVerificationLabel.setText("Android Device Pre Verification Suite");

        connectButton.setFont(new java.awt.Font("Calibri", 1, 24)); // NOI18N
        connectButton.setText("Start Test");
        connectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectButtonActionPerformed(evt);
            }
        });

        Manufacturer.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        Manufacturer.setText("Manufacturer");

        manufacturerName.setEditable(false);
        manufacturerName.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        manufacturerName.setEnabled(false);

        Model.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        Model.setText("Model");

        SerialNumber.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        SerialNumber.setText("Serial Number");

        Agent.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        Agent.setText("AirWatch Agent");

        serialNumber.setEditable(false);
        serialNumber.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        serialNumber.setEnabled(false);

        agentVersion.setEditable(false);
        agentVersion.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        agentVersion.setEnabled(false);

        modelName.setEditable(false);
        modelName.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        modelName.setEnabled(false);

        buildDisplay.setEditable(false);
        buildDisplay.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        buildDisplay.setEnabled(false);

        BuildNumber.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        BuildNumber.setText("Build Number");

        androidVersionDisplay.setEditable(false);
        androidVersionDisplay.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        androidVersionDisplay.setEnabled(false);

        Brand.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        Brand.setText("Brand");

        brandName.setEditable(false);
        brandName.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        brandName.setEnabled(false);

        AndroidVersion.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        AndroidVersion.setText("Android Version");

        enrollResult.setEditable(false);
        enrollResult.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        enrollResult.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        enrollResult.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        enrollResult.setEnabled(false);

        EnrollmentLabel.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        EnrollmentLabel.setText("Enrollment");

        ServerConnection.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        ServerConnection.setText("Server Connection");

        DeviceConnection.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        DeviceConnection.setText("Device Connection");

        serverCheck.setEditable(false);
        serverCheck.setEnabled(false);

        deviceCheck.setEditable(false);
        deviceCheck.setEnabled(false);

        startProgressBar.setFont(new java.awt.Font("Calibri", 1, 24)); // NOI18N
        startProgressBar.setForeground(new java.awt.Color(255, 153, 102));
        startProgressBar.setEnabled(false);

        awcmResult.setEditable(false);
        awcmResult.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        awcmResult.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        awcmResult.setEnabled(false);

        AWCMLabel.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        AWCMLabel.setText("Connectivity");

        pushResult.setEditable(false);
        pushResult.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        pushResult.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        pushResult.setEnabled(false);

        pushLabel.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        pushLabel.setText("Push Notification");

        complianceResult.setEditable(false);
        complianceResult.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        complianceResult.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        complianceResult.setEnabled(false);

        complianceLabel.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        complianceLabel.setText("Compliance");

        vpnResult.setEditable(false);
        vpnResult.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        vpnResult.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        vpnResult.setEnabled(false);

        vpnLabel.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        vpnLabel.setText("VPN");

        folderResult.setEditable(false);
        folderResult.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        folderResult.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        folderResult.setEnabled(false);

        createFolderLabel.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        createFolderLabel.setText("Create Folder");

        wifiResult.setEditable(false);
        wifiResult.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        wifiResult.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        wifiResult.setEnabled(false);

        wifiLabel.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        wifiLabel.setText("Wi-Fi");

        cameraResult.setEditable(false);
        cameraResult.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        cameraResult.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        cameraResult.setEnabled(false);

        restrictCameraLabel.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        restrictCameraLabel.setText("Restrict Camera");

        wipeResult.setEditable(false);
        wipeResult.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        wipeResult.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        wipeResult.setEnabled(false);

        wipeLabel.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        wipeLabel.setText("Enterprise Wipe");

        compromisedResult.setEditable(false);
        compromisedResult.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        compromisedResult.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        compromisedResult.setEnabled(false);

        deviceCompromisedLabel.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        deviceCompromisedLabel.setText("CompromiseDetection");

        reset.setFont(new java.awt.Font("Calibri", 1, 24)); // NOI18N
        reset.setText("Clear");
        reset.setEnabled(false);
        reset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetActionPerformed(evt);
            }
        });

        sendReport.setFont(new java.awt.Font("Calibri", 1, 24)); // NOI18N
        sendReport.setText("Report");
        sendReport.setEnabled(false);
        sendReport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendReportActionPerformed(evt);
            }
        });

        failedLogs.setFont(new java.awt.Font("Calibri", 1, 24)); // NOI18N
        failedLogs.setText("Failed Logs");
        failedLogs.setEnabled(false);
        failedLogs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                failedLogsActionPerformed(evt);
            }
        });

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/vmware/preverificationsuite/image/logo.png"))); // NOI18N

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel2.setText("Copyright © 2018");

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel4.setText("V1.1808");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(157, 157, 157)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(sendReport, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(54, 54, 54)
                                .addComponent(failedLogs)
                                .addGap(59, 59, 59)
                                .addComponent(reset, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addComponent(EnrollmentLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(enrollResult, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(AWCMLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 228, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                            .addComponent(awcmResult, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                            .addComponent(pushLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 228, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                            .addComponent(pushResult, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(restrictCameraLabel)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(cameraResult, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(34, 34, 34)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(createFolderLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                            .addComponent(folderResult, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                            .addComponent(complianceLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                            .addComponent(complianceResult, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                            .addComponent(vpnLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                            .addComponent(vpnResult, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(wifiLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(wifiResult, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(deviceCompromisedLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(compromisedResult, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(34, 34, 34)
                        .addComponent(wipeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(wipeResult, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(64, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(Agent, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(18, 18, 18)
                                .addComponent(agentVersion, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(DeviceConnection)
                                .addGap(18, 18, 18)
                                .addComponent(deviceCheck, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(ServerConnection, javax.swing.GroupLayout.PREFERRED_SIZE, 216, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(serverCheck, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(SerialNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(serialNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(Manufacturer, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(Model, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(15, 15, 15)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(manufacturerName, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(modelName, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(connectButton, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(BuildNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(buildDisplay, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(Brand, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(AndroidVersion, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(15, 15, 15)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(brandName, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(androidVersionDisplay, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)))))))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(preVerificationLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 896, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(startProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, 503, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(63, 63, 63))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addComponent(preVerificationLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(connectButton)
                    .addComponent(startProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(Manufacturer, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(manufacturerName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(Model, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(modelName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(SerialNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(serialNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(Brand, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(brandName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(AndroidVersion, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(androidVersionDisplay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(BuildNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(buildDisplay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Agent, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(agentVersion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ServerConnection, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(DeviceConnection, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(serverCheck, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(deviceCheck, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(createFolderLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(folderResult, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(complianceLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(complianceResult, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(vpnLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(vpnResult, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 4, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(EnrollmentLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(enrollResult, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(AWCMLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(awcmResult, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(pushLabel)
                            .addComponent(pushResult, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(restrictCameraLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cameraResult, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(wifiLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(wifiResult, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(deviceCompromisedLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(compromisedResult, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(wipeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(wipeResult, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(50, 50, 50)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(reset)
                    .addComponent(failedLogs)
                    .addComponent(sendReport))
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2)))
                .addGap(8, 8, 8))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void connectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connectButtonActionPerformed
        Executor executor = java.util.concurrent.Executors.newSingleThreadExecutor();
        executor.execute(new Runnable(){
        @Override
        public void run(){ 
            connectButton.setEnabled(false);
            startProgressBar.setEnabled(true);
            startProgressBar.setIndeterminate(true);
            startProgressBar.setStringPainted(true);
            startProgressBar.setString("Checking Device Details"); 
            checkSystemOS();
            try {
                readFromConfigFile();
            } catch (IOException ex) {
                Logger.getLogger(PreVerificationSuite.class.getName()).log(Level.SEVERE, null, ex);
            } catch (Exception ex) {
                Logger.getLogger(PreVerificationSuite.class.getName()).log(Level.SEVERE, null, ex);
            }
            if(!isFilefound){
                startProgressBar.setString("Config File Not Found"); 
                startProgressBar.setForeground(LIGHT_RED);
            }else{
                boolean agent =false,device = false,server=false;
                manufacturer = details("ro.product.manufacturer");
                setresult(manufacturerName,manufacturer,true);
                setresult(brandName,details("ro.product.brand"),true);
                setresult(modelName,details("ro.product.model"),true);
                androidVersion = details("ro.build.version.release");
                setresult(androidVersionDisplay,androidVersion,true);
                if(manufacturer.equalsIgnoreCase("samsung")){
                    serialno = details("ril.serialnumber");
                }else{
                    serialno = details("ro.serialno");
                }
                setresult(serialNumber,serialno,true);
                setresult(buildDisplay,details("ro.build.display.id"),true);
                setresult(agentVersion,true);
                setresult(deviceCheck,true);
                setresult(serverCheck,true);
                if (!"No device".equals(details("ro.product.manufacturer"))){         
                   if(checkPackage("com.airwatch.androidagent")){
                       agent = true;
                       try {
                           agentversion= checkVersion("com.airwatch.androidagent");
                       } catch (IOException ex) {
                           Logger.getLogger(PreVerificationSuite.class.getName()).log(Level.SEVERE, null, ex);
                       }
                       setresult(agentVersion,agentversion,true);
                   }           
                   else setresult(agentVersion,"Not Installed",true);
                   if(pingConnectivity("www.google.com")){
                       deviceCheck.setBackground(Color.green);
                       device = true;    
                   }else{
                       deviceCheck.setBackground(Color.red);
                   }
                }else { 
                    setresult(agentVersion,"No device",true);
                    deviceCheck.setBackground(Color.red);
                }

                try {
                     if(URLConnection(server_url,"","","")){
                     server = true;
                     serverCheck.setBackground(Color.green);
                    }
                  } catch (IOException ex) {
                    Logger.getLogger(PreVerificationSuite.class.getName()).log(Level.SEVERE, null, ex);
                    serverCheck.setBackground(Color.red);
                }

                if(!(agent && device && server)){
                    if("No device".equals(details("ro.product.manufacturer"))){
                       startProgressBar.setString("Connect Device/Enable USB debugging");
                    }else if(!agent){
                       startProgressBar.setString("Install AirWatch Agent");                    
                    }else if(!device){
                       startProgressBar.setString("Connect WiFi or Enable Mobile Data");
                    }else if(!server){
                       startProgressBar.setString("Console Server Down"); 
                    }
                    startProgressBar.setForeground(LIGHT_RED);  
                }else{                      
                    timeStamp= new SimpleDateFormat("yyyyMMdd_HHmm").format(new Date());
                    checkHub(agentversion);
                    startProgressBar.setString("Starting Verification");
                    grantpermission("android.permission.WRITE_EXTERNAL_STORAGE");
                    grantpermission("android.permission.READ_EXTERNAL_STORAGE");        
                    String enrollmentStatus = enroll();        
                    setresult(enrollResult,enrollmentStatus,true);
                    if(enrollmentStatus.equalsIgnoreCase("Pass")){
                        try {
                            installScriptApk();
                            setresult(awcmResult,awcmStatus(),true);
                            setresult(pushResult,pushNotification(),true);
                            setresult(cameraResult,cameraRestriction(),true);
                            setresult(compromisedResult,deviceCompromised(),true);
                            setresult(folderResult,createFolder(),true);
                            setresult(complianceResult,compliance(),true);
                            setresult(vpnResult,vpnProfile(),true);
                            setresult(wifiResult,wifiProfile(),true);   
                            setresult(wipeResult,enterpriseWipe(),true);
                            uninstallScriptApk();
                        } catch (IOException ex) {
                            Logger.getLogger(PreVerificationSuite.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                    reset.setEnabled(true);
                    sendReport.setEnabled(true);
                    if(areAllTrue(results)){
                        startProgressBar.setString("Verification Completed");
                        startProgressBar.setForeground(LIGHT_GREEN);
                    }else{
                        failedLogs.setEnabled(true);
                        if(!results[0]){
                        startProgressBar.setString("Enrollment Failed");
                        }else{
                        startProgressBar.setString("Verification Completed with Issues");
                        }
                        startProgressBar.setForeground(LIGHT_RED);
                    }
                }                          
            }
            startProgressBar.setValue(100);
            startProgressBar.setIndeterminate(false);
            reset.setEnabled(true);    
        }
    });    
    }//GEN-LAST:event_connectButtonActionPerformed

    private void resetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetActionPerformed
        setresult(manufacturerName,"",false);
        setresult(brandName,"",false);
        setresult(modelName,"",false);
        setresult(androidVersionDisplay,"",false);
        setresult(serialNumber,"",false);
        setresult(buildDisplay,"",false);
        setresult(agentVersion,"",false);
        serverCheck.setBackground(null);
        deviceCheck.setBackground(null);
        setresult(deviceCheck,false);
        setresult(serverCheck,false);
        setresult(enrollResult,"",false);
        setresult(awcmResult,"",false);
        setresult(pushResult,"",false);
        setresult(cameraResult,"",false);
        setresult(compromisedResult,"",false);
        setresult(folderResult,"",false);
        setresult(complianceResult,"",false);
        setresult(vpnResult,"",false);
        setresult(wifiResult,"",false);   
        setresult(wipeResult,"",false);
        startProgressBar.setForeground(LIGHT_ORANGE);
        startProgressBar.setValue(0);
        startProgressBar.setString("");
        startProgressBar.setEnabled(false);
        sendReport.setEnabled(false);
        failedLogs.setEnabled(false);
        connectButton.setEnabled(true);
        reset.setEnabled(false);
    }//GEN-LAST:event_resetActionPerformed

    private void sendReportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendReportActionPerformed
        BufferedImage img = new BufferedImage(this.getWidth(), this.getHeight(), BufferedImage.TYPE_INT_RGB);
        this.paint(img.getGraphics());
        String fileName = Path+"/Report/"+details("ro.product.manufacturer")+"_"+details("ro.product.model")+"_report_"+timeStamp+".png";
        File outputfile = new File(fileName);
        try {
            ImageIO.write(img, "png", outputfile);
        } catch (IOException ex) {
            Logger.getLogger(PreVerificationSuite.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            Desktop.getDesktop().open(new File(fileName));
        } catch (IOException ex) {
            Logger.getLogger(PreVerificationSuite.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_sendReportActionPerformed

    private void failedLogsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_failedLogsActionPerformed
        try {
            Desktop.getDesktop().open(new File(Path+"/Logs/"));
        } catch (IOException ex) {
            Logger.getLogger(PreVerificationSuite.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_failedLogsActionPerformed
    
    private void clearAndroidLog(){
        ProcessBuilder pb = new ProcessBuilder(processPath[0],processPath[1],Path+"/AdbFiles/adb shell logcat -c");
        result.runcommand(pb);
    }
    
    private void getAndroidLog(String logName){
        PrintWriter logs = null;
        try {
            String logFileName = Path+"/Logs/"+details("ro.product.manufacturer")+"_"+details("ro.product.model")+logName+"_device_log_"+timeStamp+".txt";           
            ProcessBuilder pb = new ProcessBuilder(processPath[0],processPath[1],Path+"/AdbFiles/adb shell logcat -d");
            result = result.runcommand(pb);
            logs = new PrintWriter(logFileName);
            logs.println(result.output.toString());            
        } catch (FileNotFoundException ex) {
            Logger.getLogger(PreVerificationSuite.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            logs.close();
        }  
    }
    
    private void getAndroidLog(String profileLog, String logName){
        PrintWriter logs = null;
        try {
            String logFileName = Path+"/Logs/"+details("ro.product.manufacturer")+"_"+details("ro.product.model")+logName+"_device_log_"+timeStamp+".txt";           
            logs = new PrintWriter(logFileName);
            logs.println(profileLog);            
        } catch (FileNotFoundException ex) {
            Logger.getLogger(PreVerificationSuite.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            logs.close();
        }  
    }
    
    private void getAutomatorLog(String logName, String automatorLogs){
        PrintWriter logs = null;
        try {
            String logFileName = Path+"/Logs/"+details("ro.product.manufacturer")+"_"+details("ro.product.model")+logName+"_script_log_"+timeStamp+".txt";           
            logs = new PrintWriter(logFileName);
            logs.println(automatorLogs);            
        } catch (FileNotFoundException ex) {
            Logger.getLogger(PreVerificationSuite.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            logs.close();
        }  
    }
    
    private String getProfileLog(){              
        ProcessBuilder pb = new ProcessBuilder(processPath[0],processPath[1],Path+"/AdbFiles/adb shell logcat -d");
        result = result.runcommand(pb);
        return result.output.toString();               
    }
    
    private void grantpermission(String permission){
        String[] androidVersionPart = androidVersion.split("\\."); 
        if(Integer.parseInt(androidVersionPart[0]) > 5){
            ProcessBuilder pb = new ProcessBuilder(processPath[0],processPath[1],Path+"/AdbFiles/adb shell pm grant com.airwatch.androidagent "+permission);
            result = result.runcommand(pb);  
        }
    }
    
    private void checkHub(String version){
         String[] agentVersionPart = version.split("\\."); 
        if(Integer.parseInt(agentVersionPart[0]) >=9)
            hub = "_hub.apk";
        else hub = ".apk";  
    }
    
    /* This Method is used for checking device details */
    private String details(String command){
        ProcessBuilder pb = new ProcessBuilder(processPath[0],processPath[1],Path+"/AdbFiles/adb shell getprop "+command);
        result = result.runcommand(pb);
        if((result.error.toString()).contains("error")){
            return "No device";
        } else{
            return result.output.toString().replaceAll("\\s+","");
        }
    }
    
    /* This Method is used for checking existing App */
    private boolean checkPackage(String packageName){
        ProcessBuilder pb = new ProcessBuilder(processPath[0],processPath[1],Path+"/AdbFiles/adb shell pm list packages "+packageName);
        result = result.runcommand(pb);
        return (result.output.toString()).contains(packageName);
    }
    
    private void setresult(javax.swing.JTextField textfield, String text, boolean status){
        textfield.setEnabled(status);
        textfield.setText(text);
        if(text.equalsIgnoreCase("Pass")){
            textfield.setBackground(Color.green);
        }else if(text.equalsIgnoreCase("Fail")){
            textfield.setBackground(Color.red);
        }else{
            textfield.setBackground(Color.white);
        }
        if(!status){
           textfield.setBackground( null ); 
        }        
    }
    
    private void setresult(javax.swing.JTextField textfield,boolean status){
        textfield.setEnabled(status);
    }
    
    private String checkVersion(String packageName) throws IOException{
        ProcessBuilder pb = new ProcessBuilder(processPath[0],processPath[1],Path+"/AdbFiles/adb shell dumpsys package "+packageName);
        result = result.runcommand(pb);
        String dumpsys =result.output.toString();
        Properties props = new Properties();
        props.load(new StringReader(dumpsys));
        return props.getProperty("versionName");        
    }
    
    private boolean pingConnectivity(String url){
        ProcessBuilder pb= new ProcessBuilder(processPath[0],processPath[1],Path+"/AdbFiles/adb shell ping -c2 "+url);
        result = result.runcommand(pb);
        return !((result.output.toString()).contains("unknown host")||(result.error.toString()).contains("unknown host"));
    }
    
    private void readFromConfigFile() throws IOException, Exception{
        try {
            Properties props = new Properties();
            props.load(new FileReader(Path+"/Config/credentials.cfg"));
            server_url =props.getProperty("server_url");
            tenant_code = props.getProperty("tenant_code");
            console_user =props.getProperty("console_user");
            console_password = decrypt(props.getProperty("console_password"));
            ProcessBuilder pb = new ProcessBuilder(processPath[0],processPath[1],Path+"/AdbFiles/adb push "+Path+"/Config/credentials.cfg /data/local/tmp/");
            result.runcommand(pb);
        } catch (FileNotFoundException ex) {
            isFilefound = false;
            Logger.getLogger(PreVerificationSuite.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private String decrypt(String encryptedText) throws Exception {
        byte[] decodedKey = Base64.getDecoder().decode(ENCRYPTION_KEY);
        SecretKey secretKey = new SecretKeySpec(decodedKey, 0, decodedKey.length, "AES");
        cipher = Cipher.getInstance("AES");
        Base64.Decoder decoder = Base64.getDecoder();
        byte[] encryptedTextByte = decoder.decode(encryptedText);
        cipher.init(Cipher.DECRYPT_MODE, secretKey);
        byte[] decryptedByte = cipher.doFinal(encryptedTextByte);
        String decryptedText = new String(decryptedByte);
        return decryptedText;
    }
    
    private void checkSystemOS(){
        String osName = System.getProperty("os.name");
        if(osName.toLowerCase().contains("window")){
           processPath[0] ="cmd.exe";
           processPath[1] ="/c";
        }else{
           processPath[0] ="/bin/bash";
           processPath[1] ="-c";           
        }
    }
    
    private boolean checkWiFi(String SSID){
        ProcessBuilder pb = new ProcessBuilder(processPath[0],processPath[1],Path+"/AdbFiles/adb shell dumpsys wifi ");
        result = result.runcommand(pb);
        String dumpsys =result.output.toString();
        return (dumpsys.contains(SSID));
    }
    
    private boolean checkFolder(String path){
        ProcessBuilder pb = new ProcessBuilder(processPath[0],processPath[1],Path+"/AdbFiles/adb shell ls "+path);
        result = result.runcommand(pb);
        return ((result.error.toString()).contains("No such file or directory"));
    }
    
    public static boolean areAllTrue(boolean[] array){
        for(boolean b : array) if(!b) return false;
        return true;
    }
    
    private boolean URLConnection(String URL, String API, String status, String body) throws IOException{
        String authString = console_user+":"+console_password; 
        byte[] authEncBytes = Base64.getEncoder().encode(authString.getBytes());
	String authStringEnc = new String(authEncBytes);
		      
        URL requestURL = new URL(URL+API+status);
        StringBuilder requestBodyBuilder = new StringBuilder();
        String requestBody = requestBodyBuilder.toString();
        HttpURLConnection connection = (HttpURLConnection) requestURL.openConnection();

            try {
                connection.setRequestMethod("POST");
            } catch (ProtocolException ex) {
                Logger.getLogger(PreVerificationSuite.class.getName()).log(Level.SEVERE, null, ex);
            }
            connection.setRequestProperty("Content-Length", "" + Integer.toString(requestBody.getBytes().length));
            connection.setRequestProperty("Authorization", "Basic " +authStringEnc);
            connection.setRequestProperty("Content-Type", "application/json");
            connection.setRequestProperty("aw-tenant-code", tenant_code);
            connection.setDoOutput(true);
            connection.setDoInput(true);
            OutputStream os = connection.getOutputStream();
            os.write(body.getBytes());
            os.flush();

            try (DataOutputStream sendData = new DataOutputStream(connection.getOutputStream())) {
               sendData.writeBytes(requestBody);
                sendData.flush();
              } catch (IOException ex) {
                Logger.getLogger(PreVerificationSuite.class.getName()).log(Level.SEVERE, null, ex);
            }
            int responseCode = connection.getResponseCode();            
            return ((responseCode == 200));
        }
    
    private void installApp(String appName){
        ProcessBuilder pb = new ProcessBuilder(processPath[0],processPath[1],Path+"/AdbFiles/adb install -r "+appName);
        result.runcommand(pb);
    }
    
     private void installApp(String appName, String path){
        ProcessBuilder pb = new ProcessBuilder(processPath[0],processPath[1],Path+"/AdbFiles/adb push "+appName+" "+path);
        result.runcommand(pb);
        
        pb = new ProcessBuilder(processPath[0],processPath[1],Path+"/AdbFiles/adb shell pm install -r "+path);
        result.runcommand(pb);
        
        pb = new ProcessBuilder(processPath[0],processPath[1],Path+"/AdbFiles/adb shell rm -f "+path);
        result.runcommand(pb);
    }
    
    private void uninstallApp(String appName){
        ProcessBuilder pb = new ProcessBuilder(processPath[0],processPath[1],Path+"/AdbFiles/adb uninstall "+appName);
        Process pc;
        try {
            pc = pb.start();
            pc.waitFor();
        } catch (IOException | InterruptedException ex) {
            Logger.getLogger(PreVerificationSuite.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
            
    private void installScriptApk(){
        startProgressBar.setString("Installing APK files");
        installApp(Path+"/ApkFiles/02awcm"+hub, "/sdcard/com.vmware.awcm");
        installApp(Path+"/ApkFiles/02awcmTest"+hub,"/sdcard/com.vmware.awcm.test");
        installApp(Path+"/ApkFiles/02awcm"+hub, "/sdcard/com.vmware.awcm");
        installApp(Path+"/ApkFiles/02awcmTest"+hub,"/sdcard/com.vmware.awcm.test");
        installApp(Path+"/ApkFiles/03pushNotification"+hub,"/sdcard/com.vmware.push_notification");
        installApp(Path+"/ApkFiles/03pushNotificationTest"+hub,"/sdcard/com.vmware.push_notification.test");
        installApp(Path+"/ApkFiles/04camera"+hub,"/sdcard/com.vmware.camera");
        installApp(Path+"/ApkFiles/04cameraTest"+hub,"/sdcard/com.vmware.camera.test");
        installApp(Path+"/ApkFiles/04cameraapp.apk");
        installApp(Path+"/ApkFiles/05devicecompromised"+hub,"/sdcard/com.vmware.devicecompromised");
        installApp(Path+"/ApkFiles/05devicecompromisedTest"+hub,"/sdcard/com.vmware.devicecompromised.test");
        installApp(Path+"/ApkFiles/07compliance"+hub,"/sdcard/com.vmware.comp");
        installApp(Path+"/ApkFiles/07complianceTest"+hub,"/sdcard/com.vmware.comp.test");
        installApp(Path+"/ApkFiles/08vpn"+hub,"/sdcard/com.vmware.vpn");
        installApp(Path+"/ApkFiles/08vpnTest"+hub,"/sdcard/com.vmware.vpn.test");
        installApp(Path+"/ApkFiles/08CiscoVPN.apk","/sdcard/com.cisco.anyconnect.vpn.android.avf");
        installApp(Path+"/ApkFiles/10wipe"+hub,"/sdcard/com.vmware.enterprise_wipe");
        installApp(Path+"/ApkFiles/10wipeTest"+hub,"/sdcard/com.vmware.enterprise_wipe.test");
    }
    
    private void uninstallScriptApk(){
        startProgressBar.setString("Uninstalling APK files");
        uninstallApp("com.vmware.awcm");
        uninstallApp("com.vmware.awcm.test");
        uninstallApp("com.vmware.push_notification");
        uninstallApp("com.vmware.push_notification.test");
        uninstallApp("com.flavionet.android.camera.lite");
        uninstallApp("com.vmware.camera");
        uninstallApp("com.vmware.camera.test");
        uninstallApp("com.vmware.devicecompromised");
        uninstallApp("com.vmware.devicecompromised.test");
        uninstallApp("com.vmware.comp");
        uninstallApp("com.vmware.comp.test");
        uninstallApp("com.vmware.vpn");
        uninstallApp("com.vmware.vpn.test");
        uninstallApp("com.cisco.anyconnect.vpn.android.avf");
        uninstallApp("com.vmware.enterprise_wipe");
        uninstallApp("com.vmware.enterprise_wipe.test");
    }
    
    private String enroll(){
        clearAndroidLog();
        startProgressBar.setString("Installing Enrollment apk");
        installApp(Path+"/ApkFiles/01enrollment"+hub,"/sdcard/com.vmware.enrollment");
        installApp(Path+"/ApkFiles/01enrollmentTest"+hub,"/sdcard/com.vmware.enrollment.test");
        startProgressBar.setString("Enrollment in Progress");
        status = result.runCommand(processPath,Path,"com.vmware.enrollment.ExampleInstrumentedTest", "com.vmware.enrollment.test/android.support.test.runner.AndroidJUnitRunner");      
        startProgressBar.setString("Enrollment Completed");
        uninstallApp("com.vmware.enrollment");
        uninstallApp("com.vmware.enrollment.test");
        results[0] = (status.equals("Pass"));
        if (!results[0]){
            getAndroidLog("enrollment");
            getAutomatorLog("enrollment",status);
            return "Fail";
        } else{
            ProfileLog = getProfileLog();
        }
        return status;
    }
    
    private String awcmStatus(){
        clearAndroidLog();
        int count =0;
        startProgressBar.setString("Connectivity check in Progress");
        do{
            if (count >0){
               startProgressBar.setString("Rechecking Failed scenario: "+ (count+1));
            }
           status = result.runCommand(processPath,Path,"com.vmware.awcm.ExampleInstrumentedTest", "com.vmware.awcm.test/android.support.test.runner.AndroidJUnitRunner");
        }while((!status.equals("Pass"))&& ++count<RECHECK_COUNT);
        startProgressBar.setString("Connectivity check completed");
        results[1] = (status.equals("Pass"));
        if (!results[1]){
            getAndroidLog("awcm");
            getAutomatorLog("awcm",status);
            return "Fail";
        }
         return status;
    }
    
    private String pushNotification() throws IOException{
        clearAndroidLog();
        int count =0;
        startProgressBar.setString("Sending PUSH message from console");
        String input = "{\"MessageBody\": \"GoodDay\",\"Application\": \"AirWatch\" ,\"MessageType\": \"Apns\"}";         
        try {
            System.out.println("PUSH Code Inside "+server_url);
            URLConnection(server_url,"/api/mdm/devices/messages/push?searchby=Serialnumber&id=",serialno,input);
            TimeUnit.SECONDS.sleep(10);
            URLConnection(server_url,"/api/mdm/devices/messages/push?searchby=Serialnumber&id=",serialno,input);
            TimeUnit.SECONDS.sleep(10);
            URLConnection(server_url,"/api/mdm/devices/messages/push?searchby=Serialnumber&id=",serialno,input);
        } catch (InterruptedException ex) {
            Logger.getLogger(PreVerificationSuite.class.getName()).log(Level.SEVERE, null, ex);
        }
        startProgressBar.setString("Checking for Push Notification");
        do{
            if (count >0){
               startProgressBar.setString("Rechecking Failed scenario: "+ (count+1)); 
            }
         status = result.runCommand(processPath,Path,"com.vmware.push_notification.ExampleInstrumentedTest", "com.vmware.push_notification.test/android.support.test.runner.AndroidJUnitRunner");
         }while((!status.equals("Pass"))&& ++count<RECHECK_COUNT);
         startProgressBar.setString("Completed Push Notification Check");
         results[2] = (status.equals("Pass"));
         if (!results[2]){
            getAndroidLog("pushNotification");
            getAutomatorLog("pushNotification",status);
            return "Fail";
        }
         return status;
    }
    
    private String cameraRestriction(){
        int count =0;
        startProgressBar.setString("Checking Camera restriction");
        do{
            if (count >0){
                startProgressBar.setString("Rechecking Failed scenario: "+ (count+1)); 
             }
        status=  result.runCommand(processPath,Path,"com.vmware.camera.ExampleInstrumentedTest", "com.vmware.camera.test/android.support.test.runner.AndroidJUnitRunner");      
         }while((!status.equals("Pass"))&& ++count<RECHECK_COUNT);
        startProgressBar.setString("Camera restriction check completed");
        results[3] = (status.equals("Pass"));
        if (!results[3]){
            getAndroidLog(ProfileLog,"cameraRestriction");
            getAutomatorLog("cameraRestriction",status);
            return "Fail";
        }
        return status;           
    }
    private String deviceCompromised(){
        int count =0;
        clearAndroidLog();
        startProgressBar.setString("Compromise Detection in progress");
        do{
            if (count >0){
                startProgressBar.setString("Rechecking Failed scenario: "+ (count+1)); 
             }
        status = result.runCommand(processPath,Path,"com.vmware.devicecompromised.ExampleInstrumentedTest", "com.vmware.devicecompromised.test/android.support.test.runner.AndroidJUnitRunner");
         }while((!status.equals("Pass"))&& ++count<RECHECK_COUNT);
        startProgressBar.setString("Compromise Detection completed");
        results[4] = (status.equals("Pass"));
        if (!results[4]){
            getAndroidLog("deviceCompromised");
            getAutomatorLog("deviceCompromised",status);
            return "Fail";
        }
        return status;
    }
    
    private String createFolder(){
        int count =0;
        startProgressBar.setString("Folder check in progress");
        boolean folderResult =true;
        do{
            if (count >0){
                startProgressBar.setString("Rechecking Failed scenario: "+ (count+1)); 
             }
            try {
                folderResult = checkFolder("//sdcard//folder1");
                TimeUnit.SECONDS.sleep(10);
            } catch (InterruptedException ex) {
                Logger.getLogger(PreVerificationSuite.class.getName()).log(Level.SEVERE, null, ex);
            }
         }while(folderResult && ++count<RECHECK_COUNT);
        startProgressBar.setString("Folder check completed");
        status = folderResult ?"Fail":"Pass";
        results[5] = (status.equals("Pass"));
        if (!results[5]){
            getAndroidLog(ProfileLog,"createFolder");
        }
        return status;
    }
    
    private String compliance(){
        int count =0;
        clearAndroidLog();
        startProgressBar.setString("Compliance Check in progress");
        do{
            if (count >0){
                startProgressBar.setString("Rechecking Failed scenario: "+ (count+1)); 
             }
        status =result.runCommand(processPath,Path,"com.vmware.comp.ExampleInstrumentedTest", "com.vmware.comp.test/android.support.test.runner.AndroidJUnitRunner");
        }while((!status.equals("Pass"))&& ++count<RECHECK_COUNT);
        startProgressBar.setString("Compliance Check completed");
        results[6] = (status.equals("Pass"));
        if (!results[6]){
            getAndroidLog("compliance");
            getAutomatorLog("compliance",status);
            return "Fail";
        }
        return status;
    }
    
    private String vpnProfile() throws IOException{
        int count =0;
        startProgressBar.setString("VPN Profile check in progress");
        do{
            if (count >0){
                startProgressBar.setString("Rechecking Failed scenario: "+ (count+1)); 
             }
        status = result.runCommand(processPath,Path,"com.vmware.vpn.ExampleInstrumentedTest", "com.vmware.vpn.test/android.support.test.runner.AndroidJUnitRunner");
        }while((!status.equals("Pass"))&& ++count<RECHECK_COUNT);
        startProgressBar.setString("VPN Profile check completed");
        results[7] = (status.equals("Pass"));
        if (!results[7]){
            getAndroidLog(ProfileLog,"vpn");
            getAutomatorLog("vpn",status);
            return "Fail";
        }
        return status;
    }
    
    private String wifiProfile(){
        int count =0;
        startProgressBar.setString("WiFi check in progress");
        boolean wifiresult = false;
        do{
            if (count >0){
                startProgressBar.setString("Rechecking Failed scenario: "+ (count+1)); 
             }
            try {
                wifiresult = checkWiFi("network99");
                TimeUnit.SECONDS.sleep(10);
            } catch (InterruptedException ex) {
                Logger.getLogger(PreVerificationSuite.class.getName()).log(Level.SEVERE, null, ex);
            }
        }while(!wifiresult && ++count<RECHECK_COUNT);
        status = wifiresult ?"Pass":"Fail";
        results[8] = (status.equals("Pass"));
        if (!results[8]){
            getAndroidLog(ProfileLog,"wifi");
            return "Fail";
        }
        startProgressBar.setString("WiFi check Completed");
        return status;
    }
    
    private String enterpriseWipe() throws IOException{
        int count =0;
        clearAndroidLog();
        startProgressBar.setString("Sending Enterprise Wipe Command");
        URLConnection(server_url,"api/mdm/devices/commands?command=EnterpriseWipe&searchby=Serialnumber&id=",serialno,"");
        try {
            TimeUnit.SECONDS.sleep(15);
        } catch (InterruptedException ex) {
            Logger.getLogger(PreVerificationSuite.class.getName()).log(Level.SEVERE, null, ex);
        }
        startProgressBar.setString("Enterprise Wipe Check in Progress");
        do{
            if (count >0){
                startProgressBar.setString("Rechecking Failed scenario: "+ (count+1)); 
             }
        status = result.runCommand(processPath,Path,"com.vmware.enterprise_wipe.ExampleInstrumentedTest", "com.vmware.enterprise_wipe.test/android.support.test.runner.AndroidJUnitRunner");
        }while((!status.equals("Pass"))&& ++count<RECHECK_COUNT);
        startProgressBar.setString("Enterprise Wipe Check completed");
        results[9] = (status.equals("Pass"));
        if (!results[9]){
            getAndroidLog("enterpriseWipe");
            getAutomatorLog("enterpriseWipe",status);
            return "Fail";
        }
        return status;
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Metal".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PreVerificationSuite.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PreVerificationSuite.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PreVerificationSuite.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PreVerificationSuite.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PreVerificationSuite().setVisible(true);
            }
        });
    }
    
    String server_url,tenant_code,console_user,console_password;
    String status, serialno,ProfileLog,timeStamp,manufacturer,androidVersion, agentversion,hub=".apk";
    String processPath[] = new String[2];
    String Path = System.getProperty("user.dir");
    String ENCRYPTION_KEY= "uEuXGgVtqhwKTW4Z/ECVFg==";
    static Cipher cipher; 
    int RECHECK_COUNT =2;
    boolean results[] = new boolean[10];
    boolean isFilefound=true;
    public static final Color DARK_GREEN= new Color(0,102,0);
    public static final Color LIGHT_GREEN= new Color(0,204,0);
    public static final Color LIGHT_RED= new Color(255,102,102);
    public static final Color LIGHT_ORANGE= new Color(255,153,102);
    
    adbCommand result= new adbCommand();
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel AWCMLabel;
    private javax.swing.JLabel Agent;
    private javax.swing.JLabel AndroidVersion;
    private javax.swing.JLabel Brand;
    private javax.swing.JLabel BuildNumber;
    private javax.swing.JLabel DeviceConnection;
    private javax.swing.JLabel EnrollmentLabel;
    private javax.swing.JLabel Manufacturer;
    private javax.swing.JLabel Model;
    private javax.swing.JLabel SerialNumber;
    private javax.swing.JLabel ServerConnection;
    private javax.swing.JTextField agentVersion;
    private javax.swing.JTextField androidVersionDisplay;
    private javax.swing.JTextField awcmResult;
    private javax.swing.JTextField brandName;
    private javax.swing.JTextField buildDisplay;
    private javax.swing.JTextField cameraResult;
    private javax.swing.JLabel complianceLabel;
    private javax.swing.JTextField complianceResult;
    private javax.swing.JTextField compromisedResult;
    private javax.swing.JButton connectButton;
    private javax.swing.JLabel createFolderLabel;
    private javax.swing.JTextField deviceCheck;
    private javax.swing.JLabel deviceCompromisedLabel;
    private javax.swing.JTextField enrollResult;
    private javax.swing.JButton failedLogs;
    private javax.swing.JTextField folderResult;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JTextField manufacturerName;
    private javax.swing.JTextField modelName;
    private javax.swing.JLabel preVerificationLabel;
    private javax.swing.JLabel pushLabel;
    private javax.swing.JTextField pushResult;
    private javax.swing.JButton reset;
    private javax.swing.JLabel restrictCameraLabel;
    private javax.swing.JButton sendReport;
    private javax.swing.JTextField serialNumber;
    private javax.swing.JTextField serverCheck;
    private javax.swing.JProgressBar startProgressBar;
    private javax.swing.JLabel vpnLabel;
    private javax.swing.JTextField vpnResult;
    private javax.swing.JLabel wifiLabel;
    private javax.swing.JTextField wifiResult;
    private javax.swing.JLabel wipeLabel;
    private javax.swing.JTextField wipeResult;
    // End of variables declaration//GEN-END:variables
}
